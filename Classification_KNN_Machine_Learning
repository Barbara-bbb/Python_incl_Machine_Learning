# Open https://jupyter.org/try-jupyter/lab/ using Google Chrome. Open Notebook with Python.
# In a new file, copy-paste the following code and run it. Pls wait a few seconds to get the output.

# Problem description: K-Nearest Neighbours supervised Machine Learning algorithm. 
# It is applied for prediction to which class a data point (data set array) belongs. 
# This is done, based on comparison to majority of similar data points that belong to a class. 
# There are number of classes that contain similar to each other data points. 
# Number of classes is defined upfront, by number ‘k’.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# Source data set
csv_path = 'data/iris.csv'
df = pd.read_csv(csv_path)
print(df.head())
print(df.tail())

# Get statistics of data frame
print(df.describe())

# Find unique species names
print('unique species:')
n = df['species'].unique()
print(n)

# Replacing values
df['species'].replace(['se', 'setosa','versicolor','virginica'],
                      [0, 1, 2, 3], inplace=True)
print('after replacement:')
print(df.head())

# Defining feature data set, X. 
# Converting Pandas data frame to Numpy array to use library sckit-learn

X = df[['sepal_length','sepal_width','petal_length','petal_width']].values.astype(float)
print(X[0:5])

# Labels data
y = df['species'].values
print(y[0:5])

# Normalize the data. Data Standardization with zero mean and unit variance.
from sklearn import preprocessing
X=preprocessing.StandardScaler().fit(X).transform(X.astype(float))
print(X[0:5])

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)
print('Training data set:', X_train.shape, y_train.shape)
print('Testing data set:', X_test.shape, y_test.shape)

print('X_train head:', X_train[0:5])
print('y_train head:',y_train[0:5])
print('X_test head:', X_test[0:15])
print('y_test head:',y_test[0:15])

# Importing library for KNN
from sklearn.neighbors import KNeighborsClassifier

#Training the KNN model 
k = 4
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train, y_train)
neigh

# Prediction from the model using test data set
yhat = neigh.predict(X_test)
print('y_test_predicted head:', yhat[0:15])

# Evaluation of accuracy in terms of actual and predicted values
from sklearn import metrics
print('Accuracy of the Train data set:', metrics.accuracy_score(y_train, neigh.predict(X_train)))
print('Accuracy of the Test data set:', metrics.accuracy_score(y_test, yhat))
