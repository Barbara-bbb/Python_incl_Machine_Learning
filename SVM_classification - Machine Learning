# Open https://jupyter.org/try-jupyter/lab/ using Google Chrome. Open Notebook with Python.
# In a new file, copy-paste the following code and run it. Pls wait a few seconds to get the output.

# Problem description: Using the Support Vector Machine (SVM) model for classification.
# It classifies cases by finding a separator, like a hyperplane or margin that that separates two classes. 

# Kernelling is mapping data into a higher dimensional space. 
# Kernelling functions of choice are: Linear, Polynomial, Radial basis function RBF, Sigmoid. 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# Source data set
csv_path = 'data/iris.csv'
df = pd.read_csv(csv_path)
print(df.head())
print(df.tail())

# Get statistics of data frame
print(df.describe())

# Find unique species names
print('unique species:')
n = df['species'].unique()
print(n)

# Replacing values
df['species'].replace(['se', 'setosa','versicolor','virginica'],
                      [0, 1, 2, 3], inplace=True)
print('after replacement:')
print(df.head())

# Defining feature data set, X. 
# Converting Pandas data frame to Numpy array to use library sckit-learn

X = df[['sepal_length','sepal_width','petal_length','petal_width']].values.astype(float)
print(X[0:5])
print('type of X:')
print(type(X))

# Labels data
y = df['species'].values
print(y[0:5])

# Normalize the data. Data Standardization with zero mean and unit variance.
# from sklearn import preprocessing
# X=preprocessing.StandardScaler().fit(X).transform(X.astype(float))
# print(X[0:5])

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)
print('Training data set:', X_train.shape, y_train.shape)
print('Testing data set:', X_test.shape, y_test.shape)

print('X_train head:', X_train[0:5])
print('y_train head:',y_train[0:5])
print('X_test head:', X_test[0:15])
print('y_test head:',y_test[0:15])

# Modeling by the SVM
from sklearn import svm
svm_model = svm.SVC(kernel='rbf')
svm_model.fit(X_train, y_train)

# Prediction
yhat = svm_model.predict(X_test)
yhat [0:5]

print('')
# Accuracy with confusion matrix:
from sklearn.metrics import confusion_matrix, classification_report
cnf_matrix = confusion_matrix (y_test, yhat, labels=[0,1,2,3])
print('1. Test and pedicted accuracy using confusion matrix, for classes 0,1,2,3:')
print('Test population is 30 points = 20% out of 150')
print (cnf_matrix)
print('Comment: no class 0 in the test sample')
print('Classification report:')
print(classification_report(y_test, yhat))
print('y_test:', y_test)

# 2nd method for accuracy with F1 score 
from sklearn.metrics import f1_score
f1_score(y_test , yhat , average ='weighted')


