# Open https://jupyter.org/try-jupyter/lab/ using Google Chrome. Open Notebook with Python.
# In a new file, copy-paste the following code and run it. Pls wait a few seconds to get the output.

# THE CODE
print('____________________________________________________________________________________________')
print('')
print('Problem description: Using K-Means Machine Learning algorithm for clustering.')
print('It is applied for partitioning / segmentation cases into mutually exclusive groups (clusters).')
print('Cases in each cluster (group) have similar characteristics (features).')
print('____________________________________________________________________________________________')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
%matplotlib inline

# Source data set
csv_path = 'data/iris.csv'
df = pd.read_csv(csv_path)
print('')
print(df.head())
print('')
print(df.tail())

# Get statistics of data frame
print('')
print(df.describe())

# Find unique species names
print('')
print('unique species:')
n = df['species'].unique()
print(n)

# Replacing values
df['species'].replace(['se', 'setosa','versicolor','virginica'],
                      [0, 1, 2, 3], inplace=True)
print('')
print('after replacement:')
print(df.head())

# Defining feature data set / feature matrix, X. 
# Converting Pandas data frame to Numpy array to use library sckit-learn (series of data sets values create an array)
X = df[['sepal_length','sepal_width','petal_length','petal_width','species']].values.astype(float)
print('')
print(X[0:5])
print('')
print(X.shape)
print('')
print('X type:',type(X))

# I. 
# Normalize the data. Data Standardization with zero mean and unit variance.
from sklearn import preprocessing
X_norm = preprocessing.StandardScaler().fit(X).transform(X.astype(float))
print('')
print(X_norm[0:5])

# Modeling on normalized data
from sklearn.cluster import KMeans
clusterNum = 3  # assigning number of clusters
print('n_init= 12 number of times the K-means algorithm will be run with different centroid seeds')
k_means = KMeans (init = 'k-means++', n_clusters = clusterNum, n_init= 12)
k_means.fit(X_norm)
labels_norm = k_means.labels_   # Save labels 
print('')
print('labels for each point in the model:')
print(labels_norm)
print(labels_norm.shape)
print(type(labels_norm))

# Add column 'labels' to Features data set, first convert 'labels' to Pandas data frame
labels_pd = pd.DataFrame(labels_norm, columns = ['KMeans_labels'])
# Adding new column Labels to df with column location = 5
df.insert (loc=5, column = 'KMeans_labels', value = labels_pd)  
print('')
print('data frame with KMeans labels:')
print(df[0:5])

#Chosen Features plotting with defined number of clusters
plt.figure(1)
plt.scatter(X_norm[: , 2], X_norm[: , 3], 200, labels_norm,  alpha = 0.5)
plt.title ('K-means clustering on normalized data')
plt.xlabel ('petal_length')
plt.ylabel ('petal_width')

# II.
# Modeling on non-normalized data
from sklearn.cluster import KMeans
clusterNum = 3  # assigning number of clusters
k_means = KMeans (init = 'k-means++', n_clusters = clusterNum, n_init= 12)
k_means.fit(X)
labels_non_norm = k_means.labels_   # Save labels 
print('labels for each point in the model:')
print(labels_non_norm)
print(labels_non_norm.shape)
print(type(labels_non_norm))

#Chosen Features plotting with defined number of clusters
plt.figure(2)
plt.scatter(X[: , 2], X[: , 3], 200, labels_non_norm,  alpha = 0.5)
plt.title ('K-means clustering on non-normalized data')
plt.xlabel ('petal_length')
plt.ylabel ('petal_width')
